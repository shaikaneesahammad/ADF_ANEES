{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "devdfans"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/windfirsttrgt')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_TO_DEVSTRG",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "windfirsttrgt",
						"folderPath": "output",
						"container": "devstrg"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/windwlasttrgt')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_TO_DEVSTRG",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output",
						"container": "devstrg"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Status",
						"type": "String"
					},
					{
						"name": "empcount",
						"type": "String"
					},
					{
						"name": "depidcount",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/workemp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_TO_DEVSTRG",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output",
						"container": "devstrg"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EMPID",
						"type": "String"
					},
					{
						"name": "EMPNAME",
						"type": "String"
					},
					{
						"name": "DEPID",
						"type": "String"
					},
					{
						"name": "DEPNAME",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Metadata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Metdata",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"lastModified"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Filter1",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "metadata1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('metadata1').output.lastModified",
								"type": "Expression"
							},
							"condition": {
								"value": "@item()",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-07-26T14:38:59Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "empDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "pivotsrc",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-07-27T05:47:09Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Aggrdataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Aggreate and filter data flow",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "empDataset",
								"type": "DatasetReference"
							},
							"name": "empdata"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "empAggrdata",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "FITLER"
						},
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPID as string,",
						"          EMPNAME as string,",
						"          DEPID as string,",
						"          Status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> empdata",
						"empdata filter(notEquals(lower(EMPNAME),'umar')) ~> FITLER",
						"FITLER aggregate(groupBy(Status),",
						"     empcount = count(EMPID),",
						"          depidcount = count(DEPID)) ~> aggregate1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EMPID as string,",
						"          EMPNAME as string,",
						"          DEPID as string,",
						"          DEPNAME as string",
						"     ),",
						"     partitionFileNames:['aggrdataempstus.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Exists')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "empDataset",
								"type": "DatasetReference"
							},
							"name": "empdata"
						},
						{
							"dataset": {
								"referenceName": "depdataset",
								"type": "DatasetReference"
							},
							"name": "depdata"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "empsort",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "exists1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPID as string,",
						"          EMPNAME as string,",
						"          DEPID as string,",
						"          Status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> empdata",
						"source(output(",
						"          DEPID as string,",
						"          DEPNAME as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> depdata",
						"empdata, depdata exists(empdata@DEPID == depdata@DEPID,",
						"     negate:true,",
						"     broadcast: 'auto')~> exists1",
						"exists1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Status as string,",
						"          empcount as string,",
						"          depidcount as string",
						"     ),",
						"     partitionFileNames:['existdata.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Joindataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "empDataset",
								"type": "DatasetReference"
							},
							"name": "empdata",
							"description": "Employee data"
						},
						{
							"dataset": {
								"referenceName": "depdataset",
								"type": "DatasetReference"
							},
							"name": "depdata",
							"description": "Department data"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "empdepdata",
								"type": "DatasetReference"
							},
							"name": "Target",
							"description": "Target data set"
						}
					],
					"transformations": [
						{
							"name": "EmpjoinDep",
							"description": "Joining emp and Department data"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPID as string,",
						"          EMPNAME as string,",
						"          DEPID as string,",
						"          Status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> empdata",
						"source(output(",
						"          DEPID as string,",
						"          DEPNAME as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> depdata",
						"empdata, depdata join(empdata@DEPID != depdata@DEPID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'left')~> EmpjoinDep",
						"EmpjoinDep sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DEPID as string,",
						"          DEPNAME as string",
						"     ),",
						"     partitionFileNames:['NONEQUINNER.CSV'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Target"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Lookup')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "empDataset",
								"type": "DatasetReference"
							},
							"name": "Empdata"
						},
						{
							"dataset": {
								"referenceName": "depdataset",
								"type": "DatasetReference"
							},
							"name": "depset"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "genrldataset",
								"type": "DatasetReference"
							},
							"name": "empdeplookup"
						}
					],
					"transformations": [
						{
							"name": "lookup1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPID as string,",
						"          EMPNAME as string,",
						"          DEPID as string,",
						"          Status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> Empdata",
						"source(output(",
						"          DEPID as string,",
						"          DEPNAME as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> depset",
						"Empdata, depset lookup(Empdata@DEPID == depset@DEPID,",
						"     multiple: false,",
						"     pickup: 'first',",
						"     asc(depset@DEPID, true),",
						"     partitionBy('hash', 1),",
						"     broadcast: 'right')~> lookup1",
						"lookup1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Status as string,",
						"          empcount as string,",
						"          depidcount as string",
						"     ),",
						"     partitionFileNames:['lookup.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> empdeplookup"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Lookups')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "empDataset",
								"type": "DatasetReference"
							},
							"name": "EMP"
						},
						{
							"dataset": {
								"referenceName": "depdataset",
								"type": "DatasetReference"
							},
							"name": "dep"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "empoutput",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "lookup1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPID as string,",
						"          EMPNAME as string,",
						"          DEPID as string,",
						"          Status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> EMP",
						"source(output(",
						"          DEPID as string,",
						"          DEPNAME as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> dep",
						"dep, EMP lookup(EMP@DEPID == dep@DEPID,",
						"     multiple: false,",
						"     pickup: 'last',",
						"     asc(dep@DEPID, true),",
						"     partitionBy('hash', 1),",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Status as string,",
						"          empcount as string,",
						"          depidcount as string",
						"     ),",
						"     partitionFileNames:['lookups.csv'],",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SortExists')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "empDataset",
								"type": "DatasetReference"
							},
							"name": "Empdataset"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "empsort",
								"type": "DatasetReference"
							},
							"name": "empdatasorted"
						}
					],
					"transformations": [
						{
							"name": "sort1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPID as string,",
						"          EMPNAME as string,",
						"          DEPID as string,",
						"          Status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Empdataset",
						"Empdataset sort(asc(EMPID, true),",
						"     desc(Status, true),",
						"     partitionBy('hash', 1)) ~> sort1",
						"sort1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Status as string,",
						"          empcount as string,",
						"          depidcount as string",
						"     ),",
						"     partitionFileNames:['empdatasorted.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> empdatasorted"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Split')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "empDataset",
								"type": "DatasetReference"
							},
							"name": "empdata"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "resgnempl",
								"type": "DatasetReference"
							},
							"name": "Resignedemp"
						},
						{
							"dataset": {
								"referenceName": "workemp",
								"type": "DatasetReference"
							},
							"name": "workingemp"
						}
					],
					"transformations": [
						{
							"name": "split1"
						},
						{
							"name": "lowercolumns",
							"description": "Changing status column to lowercase"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPID as string,",
						"          EMPNAME as string,",
						"          DEPID as string,",
						"          Status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> empdata",
						"lowercolumns split(equals(Status, 'resigned'),",
						"     equals(Status, 'working'),",
						"     disjoint: false) ~> split1@(resigned, Working)",
						"empdata derive(Status = iif(isNull(Status) ,'resigned', lower(Status))) ~> lowercolumns",
						"split1@resigned sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EMPID as string,",
						"          EMPNAME as string,",
						"          DEPID as string,",
						"          DEPNAME as string",
						"     ),",
						"     partitionFileNames:['resgndemp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Resignedemp",
						"split1@Working sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          EMPID as string,",
						"          EMPNAME as string,",
						"          DEPID as string,",
						"          DEPNAME as string",
						"     ),",
						"     partitionFileNames:['workngemp.csv'],",
						"     partitionBy('hash', 1)) ~> workingemp"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/workemp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Surrogate')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "pivttrgrt",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Surgtrgt",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Month as string,",
						"          {ABC Corporation} as string,",
						"          {Bridges Company} as string,",
						"          {Chiral Corporation} as string,",
						"          {Eagle Security} as string,",
						"          {Sol Company} as string,",
						"          {Timefall Inc.} as string,",
						"          {Titan Industries} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 keyGenerate(output(Primarykey as long),",
						"     startAt: 1L,",
						"     stepValue: 2L) ~> surrogateKey1",
						"surrogateKey1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Status as string,",
						"          empcount as string,",
						"          depidcount as string",
						"     ),",
						"     partitionFileNames:['srgtrgt.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Window')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "empDataset",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "windfirsttrgt",
								"type": "DatasetReference"
							},
							"name": "windfirst"
						}
					],
					"transformations": [
						{
							"name": "window1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPID as string,",
						"          EMPNAME as string,",
						"          DEPID as string,",
						"          Status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 window(over(DEPID),",
						"     asc(EMPNAME, true),",
						"     Firstemp = first(EMPNAME),",
						"     partitionBy('hash', 1)) ~> window1",
						"window1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> windfirst"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/windfirsttrgt')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/altersrow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "empDataset",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "alterres",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPID as string,",
						"          EMPNAME as string,",
						"          DEPID as string,",
						"          Status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 alterRow(deleteIf(DEPID=='7')) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DEPID as string,",
						"          DEPNAME as string",
						"     ),",
						"     partitionFileNames:['alter.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "empDataset",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "windwlasttrgt",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPID as string,",
						"          EMPNAME as string,",
						"          DEPID as integer,",
						"          Status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 alterRow(insertIf(equals(DEPID,6)),",
						"     updateIf(equals(DEPID,8)),",
						"     deleteIf(equals(DEPID,7))) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Status as string,",
						"          empcount as string,",
						"          depidcount as string",
						"     ),",
						"     partitionFileNames:['alterrow.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/windwlasttrgt')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/denserankd')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "empDataset",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "windwlasttrgt",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "window1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPID as string,",
						"          EMPNAME as string,",
						"          DEPID as string,",
						"          Status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 window(over(DEPID),",
						"     asc(EMPNAME, true),",
						"     rank = denseRank()) ~> window1",
						"window1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Status as string,",
						"          empcount as string,",
						"          depidcount as string",
						"     ),",
						"     partitionFileNames:['denserank.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/windwlasttrgt')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pivot')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "pivotsrc",
								"type": "DatasetReference"
							},
							"name": "pivtdata"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "pivttrgrt",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "pivot1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Date as date 'dd-MM-yyyy',",
						"          Client as string,",
						"          Region as string,",
						"          Month as string,",
						"          Year as string,",
						"          Quarter as string,",
						"          Amount as integer '$###,###'",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> pivtdata",
						"pivtdata pivot(groupBy(Month),",
						"     pivotBy(Client),",
						"     {} = sum(Amount),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> pivot1",
						"pivot1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Month as string,",
						"          {ABC Corporation} as string,",
						"          {Bridges Company} as string,",
						"          {Chiral Corporation} as string,",
						"          {Eagle Security} as string,",
						"          {Sol Company} as string,",
						"          {Timefall Inc.} as string,",
						"          {Titan Industries} as string",
						"     ),",
						"     partitionFileNames:['pivtrgr.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/selectuniondflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "empDataset",
								"type": "DatasetReference"
							},
							"name": "empdata",
							"description": "Employee data"
						},
						{
							"dataset": {
								"referenceName": "Mgrdata",
								"type": "DatasetReference"
							},
							"name": "Mgrdata",
							"description": "Manager data set"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "EmpunionMgrdata",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Selectempdata"
						},
						{
							"name": "EMPunionMgr",
							"description": "Combining data of emp and manager"
						},
						{
							"name": "Selectmgrdata"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPID as string,",
						"          EMPNAME as string,",
						"          DEPID as string,",
						"          Status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     rowUrlColumn: 'Filename') ~> empdata",
						"source(output(",
						"          MANAGERID as string,",
						"          MGRNAME as string,",
						"          DEPID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     rowUrlColumn: 'FILENAME') ~> Mgrdata",
						"empdata select(mapColumn(",
						"          EMPNAME,",
						"          DEPID,",
						"          Filename",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> Selectempdata",
						"Selectempdata, Selectmgrdata union(byName: true)~> EMPunionMgr",
						"Mgrdata select(mapColumn(",
						"          MANAGERID,",
						"          EMPNAME = MGRNAME,",
						"          DEPID,",
						"          Filename = FILENAME",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Selectmgrdata",
						"EMPunionMgr sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EMPID as string,",
						"          EMPNAME as string,",
						"          DEPID as string,",
						"          DEPNAME as string",
						"     ),",
						"     partitionFileNames:['empmgrdata3.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/unpivot')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "pivttrgrt",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "unpivtrg",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "unpivot1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Month as string,",
						"          {ABC Corporation} as integer,",
						"          {Bridges Company} as integer,",
						"          {Chiral Corporation} as integer,",
						"          {Eagle Security} as integer,",
						"          {Sol Company} as integer,",
						"          {Timefall Inc.} as integer,",
						"          {Titan Industries} as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 unpivot(output(",
						"          Company as string,",
						"          Amount as integer",
						"     ),",
						"     ungroupBy(Month),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> unpivot1",
						"unpivot1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Status as string,",
						"          empcount as string,",
						"          depidcount as string",
						"     ),",
						"     partitionFileNames:['unpivtrg.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		}
	]
}